name: PowerShell Tests (Fork-Friendly)

# Fork-friendly PowerShell testing workflow for psPAS module
# Focuses on dependency management validation and basic test execution

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test-powershell-51:
    name: Test on PowerShell 5.1
    runs-on: windows-2022
    
    defaults:
      run:
        shell: powershell
    
    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Verify repository structure
      - name: Verify Repository Structure
        run: |
          Write-Host "Repository Structure Verification"
          Write-Host "Workspace: $env:GITHUB_WORKSPACE"
          Write-Host "Directory: $(Get-Location)"
          
          $manifest = ".\psPAS\psPAS.psd1"
          $root = ".\psPAS\psPAS.psm1"
          $tests = ".\Tests"
          
          if (Test-Path $manifest) {
            Write-Host "Module manifest found: $manifest"
          } else {
            Write-Error "Module manifest not found: $manifest"
          }
          
          if (Test-Path $root) {
            Write-Host "Module root found: $root"
          } else {
            Write-Error "Module root not found: $root"
          }
          
          if (Test-Path $tests) {
            $count = (Get-ChildItem $tests -Filter "*.Tests.ps1" -Recurse).Count
            Write-Host "Tests directory found with $count test files"
          } else {
            Write-Warning "Tests directory not found: $tests"
          }
      
      # Step 3: Cache PowerShell modules
      - name: Cache PowerShell Modules
        uses: actions/cache@v3
        with:
          path: |
            ~\Documents\PowerShell\Modules
            ~\Documents\WindowsPowerShell\Modules
          key: ${{ runner.os }}-ps-modules-${{ hashFiles('**/psPAS.psd1') }}
          restore-keys: |
            ${{ runner.os }}-ps-modules-
      
      # Step 4: Install required modules
      - name: Install PowerShell Dependencies
        run: |
          Write-Host "Installing PowerShell dependencies"
          
          try {
            Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -MinimumVersion 5.0.0
            Write-Host "Pester installed successfully"
          } catch {
            Write-Error "Failed to install Pester: $($_.Exception.Message)"
            exit 1
          }
          
          try {
            Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -MinimumVersion 1.20.0
            Write-Host "PSScriptAnalyzer installed successfully"
          } catch {
            Write-Error "Failed to install PSScriptAnalyzer: $($_.Exception.Message)"
            exit 1
          }
      
      # Step 5: Verify module installation
      - name: Verify Module Installation
        run: |
          Write-Host "Verifying module installation"
          
          try {
            Import-Module Pester -Force
            $pester = Get-Module Pester
            Write-Host "Pester version: $($pester.Version)"
          } catch {
            Write-Error "Failed to import Pester: $($_.Exception.Message)"
            exit 1
          }
          
          try {
            Import-Module PSScriptAnalyzer -Force
            $analyzer = Get-Module PSScriptAnalyzer
            Write-Host "PSScriptAnalyzer version: $($analyzer.Version)"
          } catch {
            Write-Error "Failed to import PSScriptAnalyzer: $($_.Exception.Message)"
            exit 1
          }
      
      # Step 6: Import psPAS module
      - name: Import psPAS Module
        run: |
          Write-Host "Importing psPAS module"
          
          try {
            Import-Module .\psPAS\psPAS.psd1 -Force
            $module = Get-Module -Name psPAS
            if ($module) {
              Write-Host "psPAS module imported successfully"
              Write-Host "Module version: $($module.Version)"
              Write-Host "Exported functions: $($module.ExportedFunctions.Count)"
            } else {
              Write-Error "psPAS module import failed - module not found in session"
              exit 1
            }
          } catch {
            Write-Error "Failed to import psPAS module: $($_.Exception.Message)"
            exit 1
          }
      
      # Step 7: Test basic functionality
      - name: Test Basic Functionality
        run: |
          Write-Host "Testing basic psPAS functionality"
          
          try {
            $functions = @('New-PASSession', 'Get-PASAccount', 'Add-PASAccount')
            foreach ($func in $functions) {
              if (Get-Command -Name $func -Module psPAS -ErrorAction SilentlyContinue) {
                Write-Host "Function available: $func"
              } else {
                Write-Warning "Function not found: $func"
              }
            }
            
            Write-Host "Dependency management validation completed successfully"
          } catch {
            Write-Error "Basic functionality test failed: $($_.Exception.Message)"
            exit 1
          }
      
      # Step 8: Run Pester Tests
      - name: Run Pester Tests
        run: |
          Write-Host "Running Pester test suite"
          
          try {
            # Re-import modules for test execution
            Import-Module Pester -Force
            Import-Module .\psPAS\psPAS.psd1 -Force
            Write-Host "Modules re-imported for testing"
            
            # Configure Pester
            $config = New-PesterConfiguration
            $config.Run.Path = './Tests'
            $config.TestResult.Enabled = $true
            $config.TestResult.OutputFormat = 'NUnitXml'
            $config.TestResult.OutputPath = './TestResults.xml'
            $config.Output.Verbosity = 'Normal'
            
            # Run tests
            $result = Invoke-Pester -Configuration $config
            
            # Show results
            Write-Host "Test Results:"
            Write-Host "  Total: $($result.TotalCount)"
            Write-Host "  Passed: $($result.PassedCount)"
            Write-Host "  Failed: $($result.FailedCount)"
            Write-Host "  Skipped: $($result.SkippedCount)"
            
            # Note: Don't fail workflow based on test results
            Write-Host "Test execution completed"
            
          } catch {
            Write-Error "Test execution failed: $($_.Exception.Message)"
            exit 1
          }
      
      # Step 9: Upload Test Results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: TestResults.xml
          retention-days: 30